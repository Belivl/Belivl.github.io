---
import Layout from "@src/layouts/Layout.astro";
import Container from "@src/components/Container.astro";
import HeroSection from "@src/components/partials/HeroSectionMJ.astro";
import Banner from "@src/components/partials/Banner.astro";
import translations from "@utils/t.ts";
import ModalGallery from "@src/components/ui/ModalGallery.astro";
import Headline from "@src/components/Headline.astro";
import { Button } from "@src/components/ui/button";
const t = translations(Astro.url);
---

<Layout title="Michal Jelinski - Home">
  <!--Modal -->
  <ModalGallery data="Portfolio" />
  <Container>
    <HeroSection />
    <section class="mt-16">
      <Headline Heading="Featured" Subtitle="Work" />
      <div class="relative max-h-[1080px] overflow-clip w-full">
        <div class="masonGrid5 w-full">
          <div id="masonCol1" class="masonCol"></div>
          <div id="masonCol2" class="masonCol"></div>
          <div id="masonCol3" class="masonCol"></div>
          <div id="masonCol4" class="masonCol"></div>
          <div id="masonCol5" class="masonCol"></div>
        </div>
        <div class="absolute bottom-24 right-0 left-0 z-50 flex justify-center">
          <a href="/gallery/portfolio/">
            <Button size="lg">View more</Button>
          </a>
        </div>

        <div class="gradientHERO absolute w-full h-full z-20 inset-0"></div>
      </div>
    </section>
    <Banner />
  </Container>
</Layout>
<script></script>
<script>
  import { createImageElement } from "js/gridGallery.js";
  import imagePathsPortfolio from "js/imagePaths/imagePathsPortfolio.js";
  const masonGrid5 = document.querySelector(".masonGrid5");
  let currentColumn = 0;
  const columnCount = 5;

  function updateGrid() {
    const gridContainer = document.querySelector(
      ".masonGrid5"
    ) as HTMLDivElement;

    const windowWidth = window.innerWidth;
    gridContainer.style.display = "grid";
    gridContainer.style.columnGap = "16px";

    switch (true) {
      case windowWidth < 540: {
        gridContainer.style.gridTemplateColumns = "repeat(2, 1fr)";
        gridContainer.style.width = "100%";
        gridContainer.style.maxWidth = "350px";
        break;
      }
      case windowWidth < 800: {
        gridContainer.style.gridTemplateColumns = "repeat(3, 1fr)";
        gridContainer.style.maxWidth = "none";
        break;
      }
      case windowWidth < 1100: {
        gridContainer.style.gridTemplateColumns = "repeat(4, 1fr)";
        break;
      }
      default:
        gridContainer.style.gridTemplateColumns = "repeat(5, 1fr)";
        break;
    }
  }

  function createGrid(path, i) {
    const img = createImageElement(path);
    const btn = document.createElement("button");
    btn.appendChild(img);
    btn.classList.add("grid-item");
    btn.id = i.toString();
    masonGrid5?.children[currentColumn].appendChild(btn);

    currentColumn = (currentColumn + 1) % columnCount;
  }
  imagePathsPortfolio.forEach((path, i) => {
    createGrid(path, i);
  });

  // Initial setup
  updateGrid();

  // Update the grid on window resize
  window.addEventListener("resize", updateGrid);
</script>
<style>
  .masonGrdi5 {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    column-gap: 16px;
  }
  .grid-container {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 16px;
    padding: 16px;
  }

  .grid-item {
    background-color: #ddd;
    padding: 20px;
    text-align: center;
    border-radius: 8px;
  }
  .gradientHERO {
    background: linear-gradient(0deg, #111114, rgba(1, 1, 1, 0));
  }
</style>
