---
import { Image } from "astro:assets";
import ButtonA from "./ButtonA.astro";
import type { HTMLAttributes } from "astro/types";
import { Button } from "./button";

interface Props extends HTMLAttributes<"dialog"> {
  data?: "All" | "Other" | "Portrait" | "Cars" | "Events" | "Portfolio";
}
const { data } = Astro.props;
---

<dialog
  class="modal shadow-2xl rounded-2xl overflow-clip mx-4 md:mx-16 bg-grey-500 px-3 border border-grey-300 fixed"
  id="modal"
  data-photoarray={data}
>
  <div class="grid-container relative overflow-clip py-3">
    <!--Close Button -->
    <div class="bg-grey-500 right-20 p-3 z-10 fixed rounded-2xl">
      <ButtonA
        size="md"
        classes="default icon px-4 bg-gray-400 modal__btn modal__close close-modal "
        aria-label="Close gallery"
      >
        <span class="material-symbols-outlined">close</span>
      </ButtonA>
    </div>
    <!--StripClose -->
    <div
      class="grid grid-flow-col gap-5 w-full mb-2 overflow-clip pt-4 px-1 pb-2"
    >
      {
        [...Array(40)].map((e, i) => (
          <div class="w-5 h-7 bg-grey-300 rounded-[4px]" />
        ))
      }
    </div><!-- 
    <div class="hidden items-center justify-center gap-2 w-full relative">
      <div class="stripUp">
        {[...Array(40)].map((e, i) => <div class="cutout " />)}
      </div>
    </div>-->
    <!--StripMain -->
    <div class="gridContainerStrip gap-9 h-[80vh] max-w-100 md:w-fit">
      <button
        class="prev bg-grey-500 hidden md:grid place-items-center transition-all duration-200 rounded-lg overflow-hidden p-1 lg:p-9 border border-grey-300 hover:bg-grey-300 opacity-25 hover:opacity-80"
      >
        <span class="material-symbols-outlined text-[4rem] text-white"
          >keyboard_arrow_left</span
        >
      </button>

      <div class="w-full flex justify-evenly gap-3 h-full">
        <img
          src=""
          alt="alt"
          class="hidden md:block lightboxImgPrev prev rounded-lg overflow-hidden border border-grey-300 max-h-[75vh] object-contain"
        />
        <img
          src=""
          alt="alt"
          class="lightboxImg rounded-lg overflow-hidden border border-grey-300 max-h-[80vh] object-contain"
        />
        <img
          src=""
          alt="alt"
          class="hidden md:block lightboxImgNext next rounded-lg overflow-hidden border border-grey-300 max-h-[75vh] object-contain"
        />
      </div>

      <button
        class="next bg-grey-500 hidden md:grid place-items-center transition-all duration-200 rounded-lg overflow-hidden p-1 lg:p-9 border border-grey-300 hover:bg-grey-300 opacity-25 hover:opacity-80"
      >
        <span class="material-symbols-outlined text-[4rem] text-white"
          >keyboard_arrow_right</span
        >
      </button>
    </div>
    <div
      class="grid grid-flow-col gap-5 w-full mt-2 overflow-clip pt-2 px-1 pb-4"
    >
      {
        [...Array(40)].map((e, i) => (
          <div class="w-5 h-7 bg-grey-300 rounded-[4px]" />
        ))
      }
    </div>
    <!--StripIndex -->
    <div class="hidden items-center justify-center gap-2 w-full relative">
      <div class="stripUp rotate-180">
        <!--<div class="container2 w-full mx-8" id="rectangleContainer"></div>
         -->
        {[...Array(40)].map((e, i) => <div class="cutout" />)}
      </div>
    </div>
    <div
      class="button-container flex gap-3 justify-center absolute bottom-4 left-0 right-0 text-white"
    >
      <a class="prev">
        <Button variant="outline" size="icon">
          <span class="material-symbols-outlined">keyboard_arrow_left</span>
        </Button>
      </a>
      <Button variant="outline">
        <span class="indicatorDisp text-white"></span> / <span
          class="indicatorDisp2 text-white"></span>
      </Button>
      <a class="next">
        <Button variant="outline" size="icon">
          <span class="material-symbols-outlined">keyboard_arrow_right</span>
        </Button>
      </a>
    </div>
  </div>
</dialog>

<script>
  const modal1 = document.querySelector("#modal") as HTMLDialogElement | null;
  const closeModalBTN = document.querySelector(".close-modal");
  const indexDisplay = document.querySelector(".indicatorDisp");
  const indexDisplay2 = document.querySelector(".indicatorDisp2");

  //const gallery = document.getElementById("gallery2");
  //const totalImages2 = gallery.childElementCount;

  const lightboxImg = document.querySelector(
    ".lightboxImg"
  ) as HTMLImageElement;

  const lightboxImgPrev = document.querySelector(
    ".lightboxImgPrev"
  ) as HTMLImageElement;
  const lightboxImgNext = document.querySelector(
    ".lightboxImgNext"
  ) as HTMLImageElement;

  lightboxImgPrev.classList.add("prevImg");
  lightboxImgNext.classList.add("prevImg");

  let ArrayPhoto: string[] = [];
  import imagePathsPortrait from "../../js/imagePaths/imagePathsPortrait.js";
  import imagePathsOther from "../../js/imagePaths/imagePathsOther.js";
  import imagePathsCars from "../../js/imagePaths/imagePathsCars";
  import imagePathsEvents from "../../js/imagePaths/imagePathsEvents.js";
  import imagePathsPortfolio from "../../js/imagePaths/imagePathsPortfolio.js";

  let photos1 = modal1?.dataset.photoarray;
  let totalImages: number = 0;
  let prevImg: number = 0;
  let nextImg: number = 0;
  let currentImageIndex: number = 0;

  if (document.readyState !== "loading") {
    console.log("document is already ready, just execute code here");
    addListeners();
  } else {
    document.addEventListener("DOMContentLoaded", function () {
      console.log("document was not ready, place code here");
      addListeners();
    });
  }

  function addListeners() {
    var openBTNS = document.querySelectorAll(".grid-item");
    var openBTNS4 = document.querySelectorAll(".grid-item4");
    var prevBTNS = document.querySelectorAll(".prev");
    var nextBTNS = document.querySelectorAll(".next");
    openBTNS.forEach(function (button) {
      button.addEventListener("click", function () {
        //console.log("Index = " + index);
        let btnID: number = Number(button.id);
        openLightbox(btnID);
      });
    });
    openBTNS4.forEach(function (button) {
      button.addEventListener("click", function () {
        //console.log("Index = " + index);
        let btnID: number = Number(button.id);
        openLightbox(btnID);
      });
    });
    prevBTNS.forEach(function (button) {
      button.addEventListener("click", function () {
        changeImage(-1);
      });
    });
    nextBTNS.forEach(function (button) {
      button.addEventListener("click", function () {
        changeImage(1);
      });
    });

    switch (photos1) {
      case "All":
        ArrayPhoto = imagePathsPortrait.concat(
          imagePathsOther,
          imagePathsCars,
          imagePathsEvents
        );
        break;
      case "Portfolio":
        ArrayPhoto = imagePathsPortfolio;
        break;
      case "Portrait":
        ArrayPhoto = imagePathsPortrait;
        break;
      case "Other":
        ArrayPhoto = imagePathsOther;
        break;
      case "Cars":
        ArrayPhoto = imagePathsCars;
        break;
      case "Events":
        ArrayPhoto = imagePathsEvents;
        break;

      default:
        break;
    }
    totalImages = ArrayPhoto.length;
    //total
    //console.log("totalImages: " + totalImages);

    if (indexDisplay2 !== null) {
      indexDisplay2.innerHTML = totalImages.toString();
    }
  }
  /*
  document.addEventListener("DOMContentLoaded", function () {
    var openBTNS = document.querySelectorAll(".grid-item");
    var openBTNS4 = document.querySelectorAll(".grid-item4");
    var prevBTNS = document.querySelectorAll(".prev");
    var nextBTNS = document.querySelectorAll(".next");
    openBTNS.forEach(function (button) {
      button.addEventListener("click", function () {
        //console.log("Index = " + index);
        let btnID: number = Number(button.id);
        openLightbox(btnID);
      });
    });
    openBTNS4.forEach(function (button) {
      button.addEventListener("click", function () {
        //console.log("Index = " + index);
        let btnID: number = Number(button.id);
        openLightbox(btnID);
      });
    });
    prevBTNS.forEach(function (button) {
      button.addEventListener("click", function () {
        changeImage(-1);
      });
    });
    nextBTNS.forEach(function (button) {
      button.addEventListener("click", function () {
        changeImage(1);
      });
    });

    switch (photos1) {
      case "All":
        ArrayPhoto = imagePathsPortrait.concat(
          imagePathsOther,
          imagePathsCars,
          imagePathsEvents
        );
        break;
      case "Portfolio":
        ArrayPhoto = imagePathsPortfolio;
        break;
      case "Portrait":
        ArrayPhoto = imagePathsPortrait;
        break;
      case "Other":
        ArrayPhoto = imagePathsOther;
        break;
      case "Cars":
        ArrayPhoto = imagePathsCars;
        break;
      case "Events":
        ArrayPhoto = imagePathsEvents;
        break;

      default:
        break;
    }
    totalImages = ArrayPhoto.length;
    //total
    //console.log("totalImages: " + totalImages);

    if (indexDisplay2 !== null) {
      indexDisplay2.innerHTML = totalImages.toString();
    }
  });*/

  if (closeModalBTN !== null) {
    closeModalBTN.addEventListener("click", () => {
      modal1?.close();
    });
  }
  function updateCounter() {
    if (indexDisplay !== null) {
      indexDisplay.innerHTML = (currentImageIndex + 1).toString();
    }
  }
  function openLightbox(index) {
    currentImageIndex = index;
    updateLightbox();
    updateCounter();
    modal1?.showModal();
  }

  function changeImage(n) {
    currentImageIndex += n;
    if (currentImageIndex >= totalImages) {
      currentImageIndex = 0;
    } else if (currentImageIndex < 0) {
      currentImageIndex = totalImages - 1;
    }
    updateLightbox();
    updateCounter();
  }

  function updateLightbox() {
    if (currentImageIndex == 0) {
      prevImg = totalImages - 1;
      nextImg = currentImageIndex + 1;
    } else if (currentImageIndex === totalImages - 1) {
      prevImg = currentImageIndex - 1;
      nextImg = 0;
    } else {
      prevImg = currentImageIndex - 1;
      nextImg = currentImageIndex + 1;
    }

    lightboxImgPrev.src = ArrayPhoto[prevImg];
    lightboxImg.src = ArrayPhoto[currentImageIndex];
    lightboxImgNext.src = ArrayPhoto[nextImg];
  }
</script>

<style lang="scss">
  body.modal-open {
    overscroll-behavior: contain;
  }
  img {
    border-radius: 8px;
  }
  .prevImg {
    opacity: 10%;
    max-width: 33%;
    border: 1px solid var(--grey-200);
    transition: opacity 250ms ease-in-out;
  }
  .prevImg:hover {
    border: 1px solid var(--grey-100);
    opacity: 20%;
    transition: opacity 250ms ease-in-out;
  }
  .grid-container {
    display: grid;
    grid-template-columns: 1fr;
    grid-template-rows: auto 1fr auto;
    width: 100%;
    grid-template-areas:
      "."
      "."
      ".";
  }
  .gridContainerStrip {
    display: grid;
    grid-template-columns: auto 1fr auto;
    grid-template-rows: 1fr;
    gap: 0px 0px;
    grid-template-areas: ". . .";
    width: 100%;
  }
  .modal::backdrop {
    background: rgba(17, 17, 20, 0.8);
  }
  .container2 {
    width: 100%;
    //max-width: 1200px;
    margin: 0 auto;
    overflow: hidden;

    height: 100px;
    display: flex;
    gap: 12px;
    justify-items: center;
    align-items: center;
  }
  .rectangle {
    background-color: yellowgreen;
    height: 100px;
    width: 50px;
    background: yellowgreen;
    text-align: center;
  }
</style>
<!-- 
<script>
  interface Rectangle {
    className: string;
  }
  function createRectangles(containerWidth: number): void {
    const container = document.querySelector("#rectangleContainer");
    if (!container) return;
    //container.innerHTML = "";
    const rect = document.createElement("div");
    rect.classList.add("rectangle");
    container.appendChild(rect);

    //container.innerHTML = ""; // Clear existing content
    //const rectangleWidth = (containerWidth - 12) / 3;
    const rectangleWidth: number = 50;
    const rectangleCount = Math.floor(containerWidth / (rectangleWidth + 12));
    console.log("rectangleCount:" + rectangleCount);
    for (let i = 0; i < rectangleCount; i++) {
      //const rectangle: Rectangle = { className: "rectangle" };

      const rectangleElement = document.createElement("div");
      rectangleElement.textContent = (i + 1).toString();
      //rectangleElement.className = rectangle.className;
      rectangleElement.classList.add("cutout");
      rectangleElement.style.width = "50px";
      rectangleElement.style.height = "100px";
      rectangleElement.style.backgroundColor = "red";
      //console.log(rectangleElement);
      //rectangleElement.style.width = `${rectangleWidth}px`; // Set the width dynamically
      container.appendChild(rectangleElement);
    }
  }

  function handleResize(): void {
    const containerWidth =
      document.getElementById("rectangleContainer")?.offsetWidth || 0;
    createRectangles(containerWidth);
    //alert(containerWidth);
  }

  function initialize(): void {
    handleResize(); // Initial creation

    // Update on window resize
    window.addEventListener("resize", handleResize);
  }

  document.addEventListener("DOMContentLoaded", initialize);
</script>
-->
